#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        shift+backspace_is_delete {
            bindings = <&kp DELETE>;
            key-positions = <42 41>;
            layers = <0>;
        };

        shift+backspace_is_delete_2 {
            bindings = <&kp DELETE>;
            key-positions = <41 47>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E         &kp R  &kp T                              &kp UP                &kp Y           &kp U  &kp I      &kp O    &kp SEMICOLON  &kp LEFT_WIN
&kp TAB     &kp A  &kp S  &kp D         &kp F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H           &kp J  &kp K      &kp L    &kp P          &kp SQT
&kp LCTRL   &kp Z  &kp X  &kp C         &kp V  &kp B      &kp C_MUTE              &kp DOWN              &kp N           &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp BACKSPACE
                          &kp LEFT_ALT  &mo 1  &kp SPACE                                                &kp LEFT_SHIFT  &mo 1  &tog 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        keys {
            display-name = "NUMBER";
            bindings = <
&kp F1          &kp F2             &kp F3      &kp F4           &kp F5            &kp F6                                   &kp PAGE_UP             &kp F7          &kp F8           &kp F9            &kp F10            &kp F11               &kp F12
&kp GRAVE       &kp N1             &kp N2      &kp N3           &kp N4            &kp N5                         &kp HOME  &none          &kp END  &kp N6          &kp N7           &kp N8            &kp N9             &kp N0                &kp MINUS
&kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp PRINTSCREEN              &kp PAGE_DOWN           &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH  &kp EQUAL
                                               &trans           &trans            &trans                                                           &trans          &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        controls {
            display-name = "CNTRLS";
            bindings = <
&soft_off   &trans        &trans        &trans        &trans        &trans                                         &mmv MOVE_UP                     &trans                          &trans           &trans           &trans           &bl BL_ON        &bl BL_OFF
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_NXT                     &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &rgb_ug RGB_TOG                 &rgb_ug RGB_EFF  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI
&trans      &trans        &trans        &trans        &trans        &trans      &rgb_ug RGB_TOG                    &mmv MOVE_DOWN                   &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_EFR  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD
                                        &trans        &trans        &trans                                                                          &trans                          &trans           &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };
    };
};
